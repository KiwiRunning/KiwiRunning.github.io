(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-4f82ff70"],{"23aa":function(t,e,r){},6244:function(t,e,r){"use strict";var a=r("23aa"),s=r.n(a);s.a},"81c0":function(t,e,r){"use strict";r.r(e);var a=function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},s=[function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("body",{staticClass:"typora-export"},[r("div",{staticClass:"is-mac",attrs:{id:"write"}},[r("h1",[r("a",{staticClass:"md-header-anchor",attrs:{name:"data-struct"}}),r("span",[t._v("Data Struct")])]),r("p",[r("a",{attrs:{href:"https://github.com/Snailclimb/JavaGuide"}},[r("span",[t._v("摘录自Github: Snailclimb/JavaGuide")])])]),r("p",[t._v(" ")]),r("h3",[r("a",{staticClass:"md-header-anchor",attrs:{name:"1队列fifo"}}),r("span",[t._v("1.队列(FIFO)")])]),r("blockquote",[r("p",[r("span",[t._v("先进先出, 尾部添加, 头部删除. ")])])]),r("ul",[r("li",[r("span",[t._v("单队列: 每次都在队尾添加元素, 当前排有空间时不能利用, 造成'假溢出'问题")])]),r("li",[r("span",[t._v("循环队列: 避免'假溢出'问题")])])]),r("p",[r("strong",[r("span",[t._v("Queue")])])]),r("blockquote",[r("p",[r("span",[t._v("Java 集合中的 Queue 继承自 Collection 接口 ，Deque, LinkedList, PriorityQueue, BlockingQueue 等类都实现了它。 Queue 用来存放 等待处理元素 的集合，这种场景一般用于缓冲、并发访问。 除了继承 Collection 接口的一些方法，Queue 还添加了额外的 添加、删除、查询操作。")])])]),r("p",[r("img",{attrs:{src:"https://img-blog.csdn.net/20161019111111582",alt:"[图片来源: 拭心](https://blog.csdn.net/u011240877/article/details/52860924)"}})]),r("p",[t._v(" ")]),r("h3",[r("a",{staticClass:"md-header-anchor",attrs:{name:"2set"}}),r("span",[t._v("2.Set")])]),r("blockquote",[r("p",[r("span",[t._v("Set 继承于 Collection 接口，是一个不允许出现重复元素，并且无序的集合，主要 HashSet 和 TreeSet 两大实现类。在判断重复元素的时候，HashSet 集合会调用 hashCode()和 equal()方法来实现；TreeSet 集合会调用compareTo方法来实现。")])])]),r("p",[r("span"),r("strong",[r("span",[t._v("有序集合与无序集合说明")])])]),r("ul",[r("li",[r("span",[t._v("有序集合：集合里的元素可以根据 key 或 index 访问 (List、Map)")])]),r("li",[r("span",[t._v("无序集合：集合里的元素只能遍历。（Set）")])])]),r("p",[r("span"),r("strong",[r("span",[t._v("HashSet")])])]),r("ul",[r("li",[r("span",[t._v("不允许出现重复因素；")])]),r("li",[r("span",[t._v("允许插入Null值；")])]),r("li",[r("span",[t._v("元素无序（添加顺序和遍历顺序不一致）；")])]),r("li",[r("span",[t._v("线程不安全")])])]),r("p",[r("span"),r("strong",[r("span",[t._v("TreeSet")])])]),r("ul",[r("li",[r("span",[t._v("对插入的元素进行排序，是一个有序的集合（主要与HashSet的区别）;")])]),r("li",[r("span",[t._v("底层使用红黑树结构，而不是哈希表结构；")])]),r("li",[r("span",[t._v("允许插入Null值；")])]),r("li",[r("span",[t._v("不允许插入重复元素；")])]),r("li",[r("span",[t._v("线程不安全")])])]),r("p",[r("em",[r("span",[t._v("TreeSet元素操作:")])])]),r("pre",{staticClass:"md-fences md-end-block ty-contain-cm modeLoaded",staticStyle:{"break-inside":"unset"},attrs:{spellcheck:"false",lang:""}},[r("div",{staticClass:"CodeMirror cm-s-inner CodeMirror-wrap",attrs:{lang:""}},[r("div",{staticStyle:{overflow:"hidden",position:"relative",width:"3px",height:"0px",top:"0px",left:"8px"}},[r("textarea",{staticStyle:{position:"absolute",bottom:"-1em",padding:"0px",width:"1000px",height:"1em",outline:"none"},attrs:{autocorrect:"off",autocapitalize:"off",spellcheck:"false",tabindex:"0"}})]),r("div",{staticClass:"CodeMirror-scrollbar-filler",attrs:{"cm-not-content":"true"}}),r("div",{staticClass:"CodeMirror-gutter-filler",attrs:{"cm-not-content":"true"}}),r("div",{staticClass:"CodeMirror-scroll",attrs:{tabindex:"-1"}},[r("div",{staticClass:"CodeMirror-sizer",staticStyle:{"margin-left":"0px","margin-bottom":"0px","border-right-width":"0px","padding-right":"0px","padding-bottom":"0px"}},[r("div",{staticStyle:{position:"relative",top:"0px"}},[r("div",{staticClass:"CodeMirror-lines",attrs:{role:"presentation"}},[r("div",{staticStyle:{position:"relative",outline:"none"},attrs:{role:"presentation"}},[r("div",{staticClass:"CodeMirror-measure"},[r("pre",[r("span",[t._v("xxxxxxxxxx")])])]),r("div",{staticClass:"CodeMirror-measure"}),r("div",{staticStyle:{position:"relative","z-index":"1"}}),r("div",{staticClass:"CodeMirror-code",attrs:{role:"presentation"}},[r("div",{staticClass:"CodeMirror-activeline",staticStyle:{position:"relative"}},[r("div",{staticClass:"CodeMirror-activeline-background CodeMirror-linebackground"}),r("div",{staticClass:"CodeMirror-gutter-background CodeMirror-activeline-gutter",staticStyle:{left:"0px",width:"0px"}}),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  //迭代器遍历：升序")])])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  Iterator<String> iteratorAesc = treeSet.iterator();")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  while(iteratorAesc.hasNext()){")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("      String str = iteratorAesc.next();")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v('      System.out.println("遍历元素升序："+str);')])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  }")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v(" ")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  //迭代器遍历：降序")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  Iterator<String> iteratorDesc = treeSet.descendingIterator();")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  while(iteratorDesc.hasNext()){")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("      String str = iteratorDesc.next();")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v('      System.out.println("遍历元素降序："+str);')])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  }")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v(" ")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  //元素获取:实现NavigableSet接口")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  String firstEle = treeSet.first();//获取TreeSet头节点：")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v('  System.out.println("TreeSet头节点为：" + firstEle);')])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v(" ")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  // 获取指定元素之前的所有元素集合：(不包含指定元素)")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v('  SortedSet<String> headSet = treeSet.headSet("hello");')])]),r("div",{staticStyle:{position:"relative"}},[r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v('  System.out.println("hello："+headSet.toString());')])])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v(" ")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  //获取给定元素之间的集合：（包含头，不包含尾）")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v('  SortedSet subSet = treeSet.subSet("1","world");')])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v('  System.out.println("1--world之间节点元素为："+subSet.toString());')])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v(" ")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  //集合中不存在的元素，删除返回false")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v('  boolean whoRemove = treeSet.remove("who");')])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v('  System.out.println("who元素是否被删除"+whoRemove);')])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v(" ")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v(" //删除并返回第一个元素：如果set集合不存在元素，则返回null")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  String pollFirst = treeSet.pollFirst();")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v('  System.out.println("删除的第一个元素："+pollFirst);')])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  ")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  //删除并返回最后一个元素：如果set集合不存在元素，则返回null")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  String pollLast = treeSet.pollLast();")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v('  System.out.println("删除的最后一个元素："+pollLast);')])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v(" ")])]),r("pre",{staticClass:" CodeMirror-line ",attrs:{role:"presentation"}},[r("span",{staticStyle:{"padding-right":"0.1px"},attrs:{role:"presentation"}},[t._v("  treeSet.clear();//清空集合:")])])])])])])]),r("div",{staticStyle:{position:"absolute",height:"0px",width:"1px","border-bottom-width":"0px","border-bottom-style":"solid","border-bottom-color":"transparent",top:"663px"}}),r("div",{staticClass:"CodeMirror-gutters",staticStyle:{display:"none",height:"663px"}})])])]),r("p",[r("span")]),r("h3",[r("a",{staticClass:"md-header-anchor",attrs:{name:"3栈filo"}}),r("span",[t._v("3.栈(FILO)")])]),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/javazejian/article/details/53362993"}},[r("span",[t._v("原文链接")])])]),r("p",[r("span",[t._v("栈是一种用于存储数据的简单数据结构，有点类似链表或者顺序表（统称线性表），栈与线性表的最大区别是数据的存取的操作，我们可以这样认为栈(Stack)是一种特殊的线性表，其插入和删除操作只允许在线性表的一端进行，一般而言，把允许操作的一端称为栈顶(Top)，不可操作的一端称为栈底(Bottom)，同时把插入元素的操作称为入栈(Push),删除元素的操作称为出栈(Pop)。若栈中没有任何元素，则称为空栈。")])]),r("p",[t._v(" ")]),r("h3",[r("a",{staticClass:"md-header-anchor",attrs:{name:"4arraylist"}}),r("span",[t._v("4.ArrayList")])]),r("p",[r("span",[t._v("...")])])])])}],i=(r("6244"),r("2877")),n={},o=Object(i["a"])(n,a,s,!1,null,"270b06fa",null);e["default"]=o.exports}}]);